lmcars <- lm(mpg ~ qsec + am + qsec:am, data=mtcars, col=as.factor(am))
#boxplot(length~sex,data=mtcars)
lmcars <- lm(mpg ~ qsec + am + qsec:am, data=mtcars, col=as.factor(am))
#boxplot(length~sex,data=mtcars)
lmcars <- lm(mpg ~ qsec + am + qsec:am, data=mtcars, col=as.factor(mtcars$am))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am), xlim=c(0,10), ylim=c(0,30))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am))
#boxplot(length~sex,data=mtcars)
lmcars <- lm(mpg ~ qsec + am + qsec:am, data=mtcars)
lmcars$coefficients
b<-lmcars$coefficients
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am))
abline(b[1], b[2], col="black")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
palette(c("skyblue","firebrick"))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am))
abline(b[1], b[2], col="black")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
palette(c("blue","red"))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am))
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am),pch=16)
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
legend
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am),pch=16,legend=mtcars$am)
abline(b[1], b[2], col="blue")
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7)
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am),pch=16)
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
b
b[1]
legend("topright",c("Manual","Automatic"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
mplot(mtcars)
ggplot(data = mtcars, aes(x = qsec, y = mpg)) + geom_point()  + aes(colour = am) + labs(title = "")
par(mfrow=c(1,2))
plot(lmcars, which=1:2)
par(mfrow = c(1,1))
# Chunk 1
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
# Chunk 2
mr4<-read.csv("./Data/mr4.csv", header=TRUE, stringsAsFactors = FALSE)
mr4[9:13]<-mr4[9:13]/1000000
pander(head(mr4))
# Chunk 3
mean(score~rating, data = subset(mr4, rating == "R"))
# Chunk 4
favstats(budget~rating, data = mr4)
boxplot(budget~rating, data = mr4)
# Chunk 5
plot(budget~year, data=mr4)
# Chunk 6
pander(mean(score~rating, data = mr4), caption = "Mean IMDB Score by Rating")
# Chunk 7
plot(budget~year, data = mr4)
# Chunk 8
palette(c("blue","red","green","purple"))
plot(budget ~ year, data=mr4, col=as.factor(rating), pch=16, xlab="Year", ylab="Budget in Millions", main="Movies 1986 to 2016")
legend("topleft", pch=16, legend=c("G","PG","PG-13","R"), title="MPAA Rating", bty='n', col=palette())
# Chunk 9
pander(table(mr4$rating, mr4$year == 1990))
# Chunk 10
pander(t.test(Profit2017~rating, data = subset(mr4, rating %in% c("G","R")), mu = 0, alternative = "two.sided", conf.level = 0.95))
# Chunk 11
pander(table(mr4$rating, mr4$country %in% "UK"))
# Chunk 12
boxplot(Profit2017 ~ rating, data=mr4, ylab="Profit in millions", xlab="Rating", main="Profit by Rating")
# Chunk 13
pander(wilcox.test(Profit2017 ~ rating, data=subset(mr4, rating %in% c("G","R"))))
# Chunk 14
pander(mean(runtime ~ rating, data=subset(mr4, year == "1990"), groups=year))
# Chunk 15
pander(kruskal.test(salary~ rank, data=Salaries))
kruskal.test(salary~ rank, data=Salaries)
boxplot(salary~ rank, data=Salaries)
median(salary~ rank, data=Salaries)
# Chunk 16
plot(Height ~ Volume, data=trees)
trees.lm <- lm(Height ~ Volume, data=trees)
abline(trees.lm)
summary(trees.lm)
trees.lm$coefficients
par(mfrow=c(1,2))
plot(trees.lm, which=1:2)
par(mfrow = c(1,1)) #This resets your plotting window for future plots.
# Chunk 17
plot(waiting ~ eruptions, data=faithful)
of.lm <- lm(waiting ~ eruptions, data=faithful)
abline(of.lm)
pander(summary(of.lm))
par(mfrow=c(1,2))
plot(of.lm, which=1:2)
par(mfrow = c(1,1))
qqPlot(of.lm)
# Chunk 18
plot(length ~ width, data=KidsFeet)
of.lm <- lm(length ~ width, data=KidsFeet)
abline(of.lm)
pander(summary(of.lm))
par(mfrow=c(1,2))
plot(of.lm, which=1:2)
par(mfrow = c(1,1))
qqPlot(of.lm)
# Chunk 19
#boxplot(length~sex,data=mtcars)
lmcars <- lm(mpg ~ qsec + am + qsec:am, data=mtcars)
lmcars
summary(lmcars)
pander(lmcars)
par(mfrow=c(1,2))
plot(lmcars, which=1:2)
par(mfrow = c(1,1))
lmcars$coefficients
b<-lmcars$coefficients
palette(c("blue","red"))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am),pch=16)
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
# Chunk 20
#ggplot(data = mtcars, aes(x = qsec, y = mpg)) + geom_point()  + aes(colour = am) + labs(title = "")
b[1]+ b[3]
b[2]+ b[4]
# Chunk 1
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
# Chunk 2
MTATests <- read.csv("../Data/MapleTAdata4.csv",header=TRUE, stringsAsFactors = FALSE)
datatable(MTATests, extensions = "Responsive",options=list(lengthMenu = c(5,10,20)))
# Chunk 3
plot(Percent ~ When, data=MTATests, xlab="When Exam was Taken", ylab="Score on the Exam", col="blue", pch=19, main="Student Exam Scores\nBased on when they took the Exam")
MTA.lm <- lm(Percent ~ When, data=MTATests)
slopep <- summary(MTA.lm)$coefficients[2,4]
abline(MTA.lm)
# Chunk 4
pander(summary(MTA.lm))
# Chunk 5
plot(MTA.lm, which=1:1, caption="The error terms seem to decrease with increasing values of X")
# Chunk 6
qqPlot(MTA.lm)
# Chunk 7
summary(MTA.lm)$coefficients
setwd("C:/Users/harmkenn/OneDrive - BYU-Idaho/BYUI OD School/BYUI/Math 325/Math 325 Notebook")
MTATests <- read.csv("../Data/MapleTAdata4.csv",header=TRUE, stringsAsFactors = FALSE)
MTATests <- read.csv("./Data/MapleTAdata4.csv",header=TRUE, stringsAsFactors = FALSE)
# Chunk 1
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
# Chunk 2
MTATests <- read.csv("../Data/MapleTAdata4.csv",header=TRUE, stringsAsFactors = FALSE)
datatable(MTATests, extensions = "Responsive",options=list(lengthMenu = c(5,10,20)))
# Chunk 3
plot(Percent ~ When, data=MTATests, xlab="When Exam was Taken", ylab="Score on the Exam", col="blue", pch=19, main="Student Exam Scores\nBased on when they took the Exam")
MTA.lm <- lm(Percent ~ When, data=MTATests)
slopep <- summary(MTA.lm)$coefficients[2,4]
abline(MTA.lm)
# Chunk 4
pander(summary(MTA.lm))
# Chunk 5
plot(MTA.lm, which=1:1, caption="The error terms seem to decrease with increasing values of X")
# Chunk 6
qqPlot(MTA.lm)
# Chunk 7
summary(MTA.lm)$coefficients
# Chunk 1
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
# Chunk 2
mr4<-read.csv("./Data/mr4.csv", header=TRUE, stringsAsFactors = FALSE)
mr4[9:13]<-mr4[9:13]/1000000
pander(head(mr4))
# Chunk 3
mean(score~rating, data = subset(mr4, rating == "R"))
# Chunk 4
favstats(budget~rating, data = mr4)
boxplot(budget~rating, data = mr4)
# Chunk 5
plot(budget~year, data=mr4)
# Chunk 6
pander(mean(score~rating, data = mr4), caption = "Mean IMDB Score by Rating")
# Chunk 7
plot(budget~year, data = mr4)
# Chunk 8
palette(c("blue","red","green","purple"))
plot(budget ~ year, data=mr4, col=as.factor(rating), pch=16, xlab="Year", ylab="Budget in Millions", main="Movies 1986 to 2016")
legend("topleft", pch=16, legend=c("G","PG","PG-13","R"), title="MPAA Rating", bty='n', col=palette())
# Chunk 9
pander(table(mr4$rating, mr4$year == 1990))
# Chunk 10
pander(t.test(Profit2017~rating, data = subset(mr4, rating %in% c("G","R")), mu = 0, alternative = "two.sided", conf.level = 0.95))
# Chunk 11
pander(table(mr4$rating, mr4$country %in% "UK"))
# Chunk 12
boxplot(Profit2017 ~ rating, data=mr4, ylab="Profit in millions", xlab="Rating", main="Profit by Rating")
# Chunk 13
pander(wilcox.test(Profit2017 ~ rating, data=subset(mr4, rating %in% c("G","R"))))
# Chunk 14
pander(mean(runtime ~ rating, data=subset(mr4, year == "1990"), groups=year))
# Chunk 15
pander(kruskal.test(salary~ rank, data=Salaries))
kruskal.test(salary~ rank, data=Salaries)
boxplot(salary~ rank, data=Salaries)
median(salary~ rank, data=Salaries)
# Chunk 16
plot(Height ~ Volume, data=trees)
trees.lm <- lm(Height ~ Volume, data=trees)
abline(trees.lm)
summary(trees.lm)
trees.lm$coefficients
par(mfrow=c(1,2))
plot(trees.lm, which=1:2)
par(mfrow = c(1,1)) #This resets your plotting window for future plots.
# Chunk 17
plot(waiting ~ eruptions, data=faithful)
of.lm <- lm(waiting ~ eruptions, data=faithful)
abline(of.lm)
pander(summary(of.lm))
par(mfrow=c(1,2))
plot(of.lm, which=1:2)
par(mfrow = c(1,1))
qqPlot(of.lm)
# Chunk 18
plot(length ~ width, data=KidsFeet)
of.lm <- lm(length ~ width, data=KidsFeet)
abline(of.lm)
pander(summary(of.lm))
par(mfrow=c(1,2))
plot(of.lm, which=1:2)
par(mfrow = c(1,1))
qqPlot(of.lm)
# Chunk 19
#boxplot(length~sex,data=mtcars)
lmcars <- lm(mpg ~ qsec + am + qsec:am, data=mtcars)
lmcars
summary(lmcars)
pander(lmcars)
par(mfrow=c(1,2))
plot(lmcars, which=1:2)
par(mfrow = c(1,1))
lmcars$coefficients
b<-lmcars$coefficients
palette(c("blue","red"))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am),pch=16)
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
# Chunk 20
#ggplot(data = mtcars, aes(x = qsec, y = mpg)) + geom_point()  + aes(colour = am) + labs(title = "")
# Chunk 21
states <- data.frame(state.x77)
lmstates <- lm(mpg ~ qsec + am + qsec:am, data=mtcars)
lmcars
summary(lmcars)
pander(lmcars)
par(mfrow=c(1,2))
plot(lmcars, which=1:2)
par(mfrow = c(1,1))
lmcars$coefficients
b<-lmcars$coefficients
palette(c("blue","red"))
plot(mpg ~ qsec,data=mtcars, col=as.factor(mtcars$am),pch=16)
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
legend("topright",c("Automatic","Manual"), lty=1, lwd=5, col=palette(), cex=0.7, title="Transmission")
str(states)
lmstates <- lm(Illiteracy ~ Income + Life.Exp + Income:Life.Exp, data=states)
lmsates
lmstates
summary(lmstates)
pander(lmstates)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(lmstates, which=1:2)
lmstates <- lm(Illiteracy ~ Income + Life.Exp, data=states)
lmstates
summary(lmstates)
pander(lmstates)
par(mfrow=c(1,2))
plot(lmstates, which=1:2)
par(mfrow = c(1,1))
lmstates$coefficients
b<-lmstates$coefficients
palette(c("blue","red"))
plot(Illiteracy ~ Income,data=states, col=as.factor(states$Life.Exp),pch=16)
abline(b[1], b[2], col="blue")
lmstates$coefficients
b<-lmstates$coefficients
palette(c("blue","red"))
plot(Illiteracy ~ Income,data=states, col=as.factor(states$Life.Exp),pch=16)
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[4], col="red")
b
abline(b[1], b[2], col="blue")
View(Orange)
str(Orange)
?Orange
#boxplot(length~sex,data=mtcars)
lmor <- lm(circumference ~ age, data=Orange)
lmor
summary(lmor)
pander(lmor)
par(mfrow=c(1,2))
plot(lmor, which=1:2)
par(mfrow = c(1,1))
#boxplot(length~sex,data=mtcars)
lmor <- lm(circumference ~ age +Tree+age:Tree, data=Orange)
lmor
summary(lmor)
kids.lm <- lm(length ~ width + as.factor(birthyear), data=KidsFeet)
summary(kids.lm)
View(states)
states <- data.frame(state.x77)
lmstates <- lm(Illiteracy ~ Income + Life.Exp, data=states)
lmstates
summary(lmstates)
pander(lmstates)
par(mfrow=c(1,2))
plot(lmstates, which=1:2)
par(mfrow = c(1,1))
lmstates$coefficients
lmstates$coefficients
b<-lmstates$coefficients
palette(c("blue","red"))
plot(Illiteracy ~ Income,data=states, col=as.factor(states$Life.Exp),pch=16)
plot(Illiteracy ~ Income,data=states,pch=16)
abline(b[1,1], b[1,2], col="blue")
lmstates$coefficients
abline(b[1], b[2], col="blue")
plot(Illiteracy ~ Income,data=states,pch=16,xlim=c(0,6000),ylim=c(0,20))
abline(b[1], b[2], col="blue")
lmstates <- lm(Illiteracy ~ Income, data=states)
lmstates
summary(lmstates)
pander(lmstates)
par(mfrow=c(1,2))
plot(lmstates, which=1:2)
par(mfrow = c(1,1))
lmstates$coefficients
b<-lmstates$coefficients
palette(c("blue","red"))
plot(Illiteracy ~ Income,data=states,pch=16,xlim=c(0,6000),ylim=c(0,20))
abline(b[1], b[2], col="blue")
lmstates <- lm(Illiteracy ~ Income + Life.Exp, data=states)
lmstates
summary(lmstates)
pander(lmstates)
summary(lmstates)
par(mfrow=c(1,2))
plot(lmstates, which=1:2)
par(mfrow = c(1,1))
y
library(car)
?Highway1
View(Highway1)
str(Highway1)
lmhiway <- lm(rate ~ slim + shld + trks, data=Highway1)
lmhiway
summary(lmhiway)
pander(lmhiway)
par(mfrow=c(1,2))
plot(lmhiway, which=1:2)
par(mfrow = c(1,1))
summary(lmhiway)
lmhiway$coefficients
b<-lmhiway$coefficients
b[1]+b[2]*55+b[3]*6+b[4]*10
plot(hwy ~ cty, data = mpg)
mpg.lm <- lm(hwy ~ cty, data=mpg)
summary(mpg.lm)
par(mfrow=c(1,2)); plot(mpg.lm, which=1:2)
str(mpg)
setwd("G:/BYUI One Drive/OneDrive - BYU-Idaho/BYUI OD School/BYUI/Math 325/Math 325 Notebook/Analyses")
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
CarPrices <- read.csv("../Data/CarPrices.csv", header=TRUE, stringsAsFactors = FALSE)
DevillePrice <- subset(CarPrices, Model == "Deville")
View(DevillePrice)
str(DevillePrice)
plot(price~mileage, data=DevillePrice, col=as.factor(DevillePrice$Trim),pch=16)
plot(Price~Mileage, data=DevillePrice, col=as.factor(DevillePrice$Trim),pch=16)
pander(lmcd)
CarPrices <- read.csv("../Data/CarPrices.csv", header=TRUE, stringsAsFactors = FALSE)
DevillePrice <- subset(CarPrices, Model == "Deville")
lmcd <- lm(Price ~ Mileage + Trim + Mileage:Trim, data=DevillePrice)
lmcd
summary(lmcd)
b
pander(lmcd)
par(mfrow=c(1,2))
par(mfrow = c(1,1))
lmcd$coefficients
b<-lmcd$coefficients
palette(c("blue","red","green"))
plot(Price~Mileage,data=DevillePrice,
col=as.factor(DevillePrice$Trim),pch=16)
abline(b[1], b[2], col="blue")
b
abline(b[1], b[2], col="blue")
summary(lmcd)
pander(lmcd)
lmcd$coefficients
?CarPrices
??CarPrices
CarPrices <- read.csv("../Data/CarPrices.csv", header=TRUE, stringsAsFactors = FALSE)
DevillePrice <- subset(CarPrices, Model == "Deville")
pander(table(DevillePrice$Trim))
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
CarPrices <- read.csv("../Data/CarPrices.csv", header=TRUE, stringsAsFactors = FALSE)
DevillePrice <- subset(CarPrices, Model == "Deville")
pander(table(DevillePrice$Trim))
datatable(DevillePrice, extensions = "Responsive",options=list(lengthMenu = c(5,30)))
lmcd <- lm(Price ~ Mileage + Trim + Mileage:Trim, data=DevillePrice)
palette(c("blue","red","green"))
plot(Price~Mileage,data=DevillePrice,
col=as.factor(DevillePrice$Trim),pch=16)
b<-lmcd$coefficients
abline(b[1], b[2], col="blue")
abline(b[1]+ b[3],b[2]+ b[5], col="red")
abline(b[1]+ b[4],b[2]+ b[6], col="green")
legend("topright",c("DHS Sedan 4D","DTS Sedan 4D","Sedan 4D"), lty=1, lwd=5, col=palette(), cex=0.7, title="Trim")
pander(lmcd)
par(mfrow=c(1,2))
plot(lmcd, which=1:2)
par(mfrow = c(1,1))
library(mosaic)
library(DT)
library(knitr)
library(plyr)
library(pander)
library(car)
library(dplyr)
View(Allgames)
# Chunk 1
library(mosaic)
library(DT)
library(knitr)
library(pander)
library(car)
library(plyr)
library(dplyr)
# Chunk 2
Allgames <- read.csv("./Pre 2018 History.csv",header=TRUE, stringsAsFactors = FALSE)
teamconf <- read.csv("./teamconf.csv",header=TRUE, stringsAsFactors = FALSE)
AGTC <- merge(Allgames,teamconf, by.x = "Winner", by.y = "Team", all.x = TRUE)
colnames(AGTC)[colnames(AGTC)=="Conference"] <- "WConf"
AGTCC <- merge(AGTC,teamconf, by.x = "Loser", by.y = "Team", all.x = TRUE)
colnames(AGTCC)[colnames(AGTCC)=="Conference"] <- "LConf"
mycolumns<-c(3:7,2,12,8,9,1,13,10,11)
AGTCCS<-AGTCC[mycolumns]
AGTCCS$SeD <- AGTCCS$wSeed-AGTCCS$LSeed
AGTCCS$ScD <- AGTCCS$WScore -AGTCCS$LScore
AGTCCS$Upset<-paste(AGTCCS$wSeed, AGTCCS$LSeed, sep=" over ")
# Chunk 3
datatable(Allgames, extensions = "Responsive",options=list(lengthMenu = c(10,25,68)))
# Chunk 4
Allgames$Round<-factor(Allgames$Round, levels=c("Play-in", "64", "32","16","8","4","Champ"))
SH<-table(Allgames$wSeed,Allgames$Round)
rownames(SH)<-c("Seed 1","Seed 2","Seed 3","Seed 4","Seed 5","Seed 6","Seed 7","Seed 8","Seed 9","Seed 10","Seed 11","Seed 12","Seed 13","Seed 14","Seed 15","Seed 16")
pander(SH)
View(AGTCCS)
View(AGTCCS, AGTCCS$SeD>=4)
View(subset(AGTCCS, SeD>=4))
pander(table(AGTCCS$SeD, data=subset(AGTCCS, SeD>=4)))
upsets<-subset(AGTCCS, SeD>=4)
pander(table(upsets$SeD))
pander(table(upsets$Upset))
pander(table(upsets$WConf))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("BH", "callr", "DBI", "dbplyr", "devtools", "forcats", "ggformula", "haven", "hms", "httpuv", "knitr", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "quantreg", "RcppEigen", "reprex", "rmarkdown", "rpart", "rsconnect", "selectr", "stringr", "tidyr", "tidyselect", "xml2", "yaml"))
